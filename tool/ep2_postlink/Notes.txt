
---------------------------------
    RELOCATIONS
---------------------------------

Линкер GCC генерирует довольно сложный код для PLT секции, а также
код в секции GOT неизвестного назначения. Postlinker перестраивает PLT
в более простой код в стиле ADS. У данного решения есть и ограничение -
эльф не может импортировать больше ~150 функций (в перспективе лимит
может быть удвоен), что должно хватить для эльфа практически любой
сложности. Также есть баг, когда при генерации релокации типа ABS32 для
импортируемого символа, для него же генерируется и запись в PLT, несмотря
на то, что в коде она не используется.

Принимаемые Postlinker-ом меры в этом направлении позволяют уменьшить размер
образа эльфа, который занимает место в памяти.

---------------------------------
    IMPORTS
---------------------------------

Вместо обычного .dynsym используется две раздельные секции:
  .dynsym - в ней теперь хранятся экспортируемые символы из образа
            (только в shared libraries, но в таком случае фильтрация по
            используемости в релокациях как для обычных эльфов не работает,
            и необходимо применять к ним фильтрацию по имени), а также
            внутренние символы, которым соответствуют внутренние релокации
            (для всех типов эльфов).

  .imports - в этой non-abi секции хранятся внешние символы, которые требует
             эльф для своей работы. Они могут импортироваться как из
             стандартной библиотеки, так и из подгружаемых shared libs.

Для того, чтобы избавиться от возникающих проблем с внутренними связками
  секций (links), несколько меняется назначение релокационных секций.
  Теперь .rel.plt связана с .imports, а .rel.dyn - с .dynsym.

.rel.plt включает в себя не только JUMP_SLOT релокации, про которые
  заранее изветсно, что они будут соответствовать импортируемым символам, но
  также и некоторые релокации (ABS32), раньше принадлежавшие .rel.dyn и которым
  соответствуют импортируемые символы.

.rel.dyn же включает в себя все безсимвольные релокации типа RELATIVE (они всегда
  внутренние), а также некоторые релокации ABS32, соответствующие внутренним
  символам.

Благодаря такому решению упрощается и ускоряется загрузка иерархических библиотек.
