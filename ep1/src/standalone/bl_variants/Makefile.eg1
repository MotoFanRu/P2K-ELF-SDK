# Script: Motorola P2K Makefile
# Flavor: EG1, EA1 (ElfPack v1.x, ARM GCC, Linux)
# Author: EXL, 03-Jan-2025

P2K_ELF_SDK       = ../../../..
EP1_TOOLCHAIN_BIN = $(P2K_ELF_SDK)/tool/compiler/ep1_lin_ADS/bin
EP2_TOOLCHAIN_BIN = $(P2K_ELF_SDK)/tool/compiler/ep2_lin_GCC/bin

CC                = $(shell command -v arm-none-eabi-gcc || echo $(EP1_TOOLCHAIN_BIN)/arm-none-eabi-gcc)
OBJDUMP           = $(shell command -v arm-none-eabi-objdump || echo $(EP1_TOOLCHAIN_BIN)/arm-none-eabi-objdump)
OBJCOPY           = $(shell command -v arm-none-eabi-objcopy || echo $(EP1_TOOLCHAIN_BIN)/arm-none-eabi-objcopy)

INCLUDES          = -nostdinc -I$(P2K_ELF_SDK)/sdk  -I$(P2K_ELF_SDK)/ep1/inc
DEFINES           = -D__P2K__
WARNINGS          = -Wall -Wextra
OPTIMIZATIONS     = -O2
FEATURES          = -ffreestanding -fshort-wchar -fshort-enums -fpack-struct=4 -fno-builtin
ifeq ($(ARGON), 1)
	FLAVOR        = -DEA1
	CPU_FLAGS     = -mbig-endian -mthumb -mthumb-interwork -mbe32 -march=armv6j -mtune=arm1136jf-s
	LD_SCRIPT_TPL = ElfPackArgon.tpl
	ENTRY_POINT   = 0xA1530B18
else
	FLAVOR        = -DEG1
	CPU_FLAGS     = -mbig-endian -mthumb -mthumb-interwork -march=armv4t -mtune=arm7tdmi-s
	LD_SCRIPT_TPL = ElfPackNeptune.tpl
	ENTRY_POINT   = 0x10901700
endif
CFLAGS            = $(INCLUDES) $(DEFINES) $(FLAVOR) $(WARNINGS) $(OPTIMIZATIONS) $(CPU_FLAGS) $(FEATURES)
CXXFLAGS          = $(CFLAGS)
LDFLAGS           = $(CFLAGS) -Wl,--gc-sections
LIBS              = -nostdlib -nodefaultlibs -T bl.ld

TARGET1_ELF       = bl_gcc_equ.elf
TARGET2_ELF       = bl_gcc_sym.elf
TARGET3_ELF       = bl_gcc_gcc.elf
TARGET4_ELF       = bl_gcc_def.elf

all:
	sed 's/%addr_entry%/$(ENTRY_POINT)/g' ../../../tpl/$(LD_SCRIPT_TPL) > bl.ld
	$(CC) $(CFLAGS) -c lib_gcc.S -o lib_gcc.o
	$(CC) $(CFLAGS) -c lib_gcc_equ.S -o lib_gcc_equ.o
	$(CC) $(CFLAGS) -c bl.c -o bl.o
	$(CC) $(CFLAGS) -DLIB_DEFINES -c bl.c -o bld.o
	$(CC) $(LDFLAGS) bl.o lib_gcc_equ.o $(LIBS) -o $(TARGET1_ELF)
	$(CC) $(LDFLAGS) -Wl,-R lib_gcc.syms bl.o $(LIBS) -o $(TARGET2_ELF)
	$(CC) $(LDFLAGS) bl.o lib_gcc.o $(LIBS) -o $(TARGET3_ELF)
	$(CC) $(LDFLAGS) bld.o $(LIBS) -o $(TARGET4_ELF)
	$(OBJCOPY) -O binary -j .text* $(TARGET1_ELF) $(TARGET1_ELF).bin
	$(OBJCOPY) -O binary -j .text* $(TARGET2_ELF) $(TARGET2_ELF).bin
	$(OBJCOPY) -O binary -j .text* $(TARGET3_ELF) $(TARGET3_ELF).bin
	$(OBJCOPY) -O binary -j .text* $(TARGET4_ELF) $(TARGET4_ELF).bin
	$(OBJDUMP) --disassemble=AutorunMain $(TARGET1_ELF)
	$(OBJDUMP) --disassemble=AutorunMain $(TARGET2_ELF)
	$(OBJDUMP) --disassemble=AutorunMain $(TARGET3_ELF)
	$(OBJDUMP) --disassemble=AutorunMain $(TARGET4_ELF)
	ls -al *.bin
	@for file in *.bin; do echo "===== $$file ====="; hexdump -C "$$file"; done

clean:
	-rm -f *.o
	-rm -f *.elf
	-rm -f *.bin
	-rm -f *.ld
